array Uint64 [byte; 8];
array Hash [byte; 32];
vector Bytes <byte>;

array Bytes64 [byte; 64];
array BlsPubkey [byte; 32];
array BlsSignature [byte; 96];

array BlsPubkeyArray [BlsPubkey; 512];

vector SszProof <Hash>;
vector MptProof <Bytes>;

struct HeaderDigest {
    // The hash for leaves; otherwise, the hash of children nodes.
    children_hash: Hash,
}

vector MmrProof <HeaderDigest>;

struct Header {
    slot: Uint64,
    proposer_index: Uint64,
    parent_root: Hash,
    state_root: Hash,
    body_root: Hash,
}

struct SyncAggregate {
    sync_committee_bits: Bytes64,
    sync_committee_signature: BlsSignature,
}

table FinalityUpdate {
    attested_header: Header,
    sync_aggregate: SyncAggregate,
    signature_slot: Uint64,
    finalized_header: Header,
    finality_branch: SszProof,
}

struct SyncCommittee {
    period: Uint64,
    pubkeys: BlsPubkeyArray,
    aggregate_pubkey: BlsPubkey,
}

vector HeaderVec <Header>;
vector FinalityUpdateVec <FinalityUpdate>;

struct Client {
    minimal_slot: Uint64,
    maximal_slot: Uint64,
    tip_header_root: Hash,
    headers_mmr_root: HeaderDigest,
}

table HeadersUpdate {
    headers: HeaderVec,
    // TODO unverified field
    updates: FinalityUpdateVec,

    new_headers_mmr_root: HeaderDigest,
    // Prove the new headers are in the new headers_mmr_root.
    new_headers_mmr_proof: MmrProof,
}

table TransactionProof {
    header: Header,
    transaction_index: Uint64,
    receipts_root: Hash,

    // Prove header in header_mmr_root.
    header_mmr_proof: MmrProof,
    // Prove transaction in body_root.
    transaction_ssz_proof: SszProof,
    // Prove receipt in receipts_root.
    receipt_mpt_proof: MptProof,
    // Prove receipts_root in body_root.
    receipts_root_ssz_proof: SszProof,
}

table TransactionPayload {
    // Raw data of the transaction.
    transaction: Bytes,
    // Raw data of the transaction receipt.
    receipt: Bytes,
}
