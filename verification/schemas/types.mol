//! Documentation for bellow data types are written in the Rust source code.
//!
//! Ref: ../src/types/core.rs

//
// Basic Types
//

array Uint64 [byte; 8];
array Hash [byte; 32];
vector Bytes <byte>;

//
// Proofs, Public Keys and Signatures
//

vector SszProof <Hash>;
vector MptProof <Bytes>;

struct HeaderDigest {
    children_hash: Hash,
}

vector MmrProof <HeaderDigest>;

array BlsPubkey [byte; 48];
array BlsSignature [byte; 96];

vector BlsPubkeyVec <BlsPubkey>;

//
// Composite Types
//

struct Header {
    slot: Uint64,
    proposer_index: Uint64,
    parent_root: Hash,
    state_root: Hash,
    body_root: Hash,
}


vector HeaderVec <Header>;

array SyncCommitteeBits [byte; 64];

struct SyncAggregate {
    sync_committee_bits: SyncCommitteeBits,
    sync_committee_signature: BlsSignature,
}

table SyncCommittee {
    pubkeys: BlsPubkeyVec,
    aggregate_pubkey: BlsPubkey,
}

//
// Witnesses
//

table ClientBootstrap {
    header: Header,
    current_sync_committee_branch: SszProof,
}

table ClientUpdate {
    attested_header: Header,
    finality_branch: SszProof,
    sync_aggregate: SyncAggregate,
    signature_slot: Uint64,
    new_headers_mmr_proof: MmrProof,
    headers: HeaderVec,
}

table SyncCommitteeUpdate {
    attested_header: Header,
    next_sync_committee_branch: SszProof,
    sync_aggregate: SyncAggregate,
    signature_slot: Uint64,
}

table TransactionProof {
    header: Header,
    transaction_index: Uint64,
    receipts_root: Hash,

    header_mmr_proof: MmrProof,
    transaction_ssz_proof: SszProof,
    receipt_mpt_proof: MptProof,
    receipts_root_ssz_proof: SszProof,
}

table TransactionPayload {
    transaction: Bytes,
    receipt: Bytes,
}

//
// Cells
//

struct ClientInfo {
    last_client_id: byte,
    minimal_headers_count: byte,
    genesis_validators_root: Hash,
}

struct Client {
    id: byte,
    minimal_slot: Uint64,
    maximal_slot: Uint64,
    tip_header_root: Hash,
    headers_mmr_root: HeaderDigest,
}

table ClientSyncCommittee {
    period: Uint64,
    data: SyncCommittee,
}

struct ClientTypeArgs {
    type_id: Hash,
    clients_count: byte,
}
