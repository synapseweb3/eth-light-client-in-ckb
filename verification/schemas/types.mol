//
// Basic
//

array Uint64 [byte; 8];
array Hash [byte; 32];
vector Bytes <byte>;

//
// Proofs
//

vector SszProof <Hash>;
vector MptProof <Bytes>;

struct HeaderDigest {
    // The hash for leaves; otherwise, the hash of children nodes.
    children_hash: Hash,
}

vector MmrProof <HeaderDigest>;

struct Header {
    slot: Uint64,
    proposer_index: Uint64,
    parent_root: Hash,
    state_root: Hash,
    body_root: Hash,
}

vector HeaderVec <Header>;

table ProofUpdate {
    new_headers_mmr_root: HeaderDigest,
    new_headers_mmr_proof: MmrProof,
    updates: HeaderVec,
}

table TransactionProof {
    header: Header,
    transaction_index: Uint64,
    receipts_root: Hash,

    // Prove header in header_mmr_root.
    header_mmr_proof: MmrProof,
    // Prove transaction in body_root.
    transaction_ssz_proof: SszProof,
    // Prove receipt in receipts_root.
    receipt_mpt_proof: MptProof,
    // Prove receipts_root in body_root.
    receipts_root_ssz_proof: SszProof,
}

table TransactionPayload {
    // Raw data of the transaction.
    transaction: Bytes,
    // Raw data of the transaction receipt.
    receipt: Bytes,
}

//
// Cells
//

// The client info cell, which stored ID of the latest light client cell.
struct ClientInfo {
    last_id: byte,
    minimal_updates_count: byte,
}

// The client cell.
struct Client {
    id: byte,
    minimal_slot: Uint64,
    maximal_slot: Uint64,
    tip_valid_header_root: Hash,
    headers_mmr_root: HeaderDigest,
}

// The args for the type script of client cells and client index cell.
struct ClientTypeArgs {
    type_id: Hash,
    cells_count: byte,
}
